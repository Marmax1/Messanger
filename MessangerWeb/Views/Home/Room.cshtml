@{
    ViewData["Title"] = "Комната " + ViewBag.RoomName;
}

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@(ViewBag.RoomName ?? $"Комната {ViewBag.RoomId}")</h1>
        <button id="leaveRoomBtn" class="btn btn-danger">Покинуть комнату</button>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div id="messages" class="border p-3 mb-3" style="height: 400px; overflow-y: scroll;"></div>

            <div class="input-group mb-3">
                <input type="text" id="messageInput" class="form-control" placeholder="Введите сообщение" />
                <button id="sendButton" class="btn btn-success">Отправить</button>
            </div>

            <div class="d-flex justify-content-center">
                <button id="loadMoreBtn" class="btn btn-secondary">Загрузить предыдущие сообщения</button>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">Участники комнаты</div>
                <div id="usersList" class="card-body"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const roomId = parseInt("@ViewBag.RoomId");
        let ws;
        let currentUser = null;
        let currentPage = 1;
        const pageSize = 20;
        let isLoadingHistory = false;

        function initWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
            const host = window.location.host;
            ws = new WebSocket(`${protocol}${host}/ws`);

            ws.onopen = () => {
                console.log("WebSocket подключен");
                joinRoom();
            };

            ws.onclose = () => {
                console.log("WebSocket отключен");
                setTimeout(initWebSocket, 5000);
            };

            ws.onmessage = handleServerMessage;
            ws.onerror = (e) => console.error("WebSocket error:", e);
        }

        function joinRoom() {
            sendMessage({ action: "join", roomId });
        }

        function handleServerMessage(e) {
            try {
                const data = JSON.parse(e.data);
                console.log("Получено сообщение:", data);

                switch (data.type) {
                    case "join_success":
                        currentUser = { id: data.data.userId };
                        loadHistory();
                        getUsers();
                        break;
                    case "message":
                        addMessage(data.data);
                        break;
                    case "history":
                        displayHistoryMessages(data.data.messages || []);
                        isLoadingHistory = false;
                        break;
                    case "users_list":
                        updateUsersList(data.data || []);
                        break;
                    case "left_room":
                        console.log("Успешно покинули комнату", data.data.roomId);
                        window.location.href = '/';
                        break;
                    case "error":
                        alert(data.error);
                        isLoadingHistory = false;
                        break;
                    default:
                        console.warn("Неизвестный тип сообщения:", data.type);
                }
            } catch (error) {
                console.error("Ошибка обработки сообщения:", error);
                isLoadingHistory = false;
            }
        }

        function addMessage(message) {
            const messagesDiv = document.getElementById('messages');
            const messageElement = document.createElement('div');
            messageElement.className = 'mb-2';
            messageElement.innerHTML = `
                <div class="d-flex justify-content-between">
                    <strong>${message.sender}</strong>
                    <small class="text-muted">${new Date(message.timestamp).toLocaleString()}</small>
                </div>
                <div>${message.text}</div>
            `;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function displayHistoryMessages(messages) {
            const messagesDiv = document.getElementById('messages');

            if (currentPage === 1) {
                messagesDiv.innerHTML = '';
                if (messages.length === 0) {
                    messagesDiv.innerHTML = '<div class="text-muted text-center">Нет сообщений</div>';
                    return;
                }
            }

            const fragment = document.createDocumentFragment();
            messages.forEach(msg => {
                const messageElement = document.createElement('div');
                messageElement.className = 'mb-2';
                messageElement.innerHTML = `
                    <div class="d-flex justify-content-between">
                        <strong>${msg.sender}</strong>
                        <small class="text-muted">${new Date(msg.timestamp).toLocaleString()}</small>
                    </div>
                    <div>${msg.text}</div>
                `;
                fragment.appendChild(messageElement);
            });

            if (currentPage === 1) {
                messagesDiv.appendChild(fragment);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            } else {
                messagesDiv.insertBefore(fragment, messagesDiv.firstChild);
            }
        }

        function updateUsersList(users) {
            const usersList = document.getElementById('usersList');
            usersList.innerHTML = '';

            if (!users.length) {
                usersList.innerHTML = '<div class="text-muted">Нет пользователей</div>';
                return;
            }

            const list = document.createElement('ul');
            list.className = 'list-unstyled';

            users.forEach(user => {
                const item = document.createElement('li');
                item.className = 'mb-1';
                item.textContent = `${user.nickname}${user.id === currentUser?.id ? ' (Вы)' : ''}`;
                list.appendChild(item);
            });

            usersList.appendChild(list);
        }

        function loadHistory() {
            if (isLoadingHistory) return;

            isLoadingHistory = true;
            sendMessage({
                action: "load_history",
                roomId,
                page: currentPage,
                pageSize
            });
        }

        function getUsers() {
            sendMessage({ action: "get_users", roomId });
        }

        function leaveRoom() {
            if (confirm('Вы уверены, что хотите покинуть комнату?')) {
                sendMessage({
                    action: "leave",
                    roomId: roomId
                });
            }
        }

        function sendMessage(message) {
            if (ws.readyState === WebSocket.OPEN) {
                console.log("Отправка сообщения:", message);
                ws.send(JSON.stringify(message));
            } else {
                console.error("WebSocket не подключен. Состояние:", ws.readyState);
                setTimeout(() => {
                    console.log("Повторная попытка отправки...");
                    sendMessage(message);
                }, 500);
            }
        }

        function sendNewMessage() {
            const input = document.getElementById('messageInput');
            const text = input.value.trim();
            if (!text) return;

            sendMessage({
                action: "send",
                roomId,
                text
            });
            input.value = '';
            input.focus();
        }

        document.addEventListener('DOMContentLoaded', () => {
            initWebSocket();

            document.getElementById('sendButton').addEventListener('click', sendNewMessage);

            document.getElementById('messageInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') sendNewMessage();
            });

            document.getElementById('loadMoreBtn').addEventListener('click', () => {
                currentPage++;
                loadHistory();
            });

            document.getElementById('leaveRoomBtn').addEventListener('click', leaveRoom);
        });
    </script>
}